package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private ArticleRepository articleRepository;

    @PostMapping(path="/add/user") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        userRepository.save(user);
        return "User saved successfully";
    }

    @PostMapping(path="/add/article")
    public @ResponseBody String addNewArticle (@RequestBody Article article){
        articleRepository.save(article);
        return "Article saved successfully";

    }


    @GetMapping(path="/all/users")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/all/articles")
    public @ResponseBody Iterable<Article> getAllArticles()  {
        return articleRepository.findAll();
    }


    @PutMapping(path = "/update/user/{id}")
    public @ResponseBody String updateUser (@PathVariable Integer id,@RequestBody User updatedUser){
        User user = userRepository.findById(id).get();

        if(!updatedUser.getName().isEmpty()){
            user.setName(updatedUser.getName());
        }

        if(!updatedUser.getEmail().isEmpty()){
            user.setEmail(updatedUser.getEmail());
        }

        if(!updatedUser.getPassword().isEmpty()){
            user.setPassword(updatedUser.getPassword());
        }

        if(!updatedUser.getRole().isEmpty()){
            user.setRole(updatedUser.getRole());
        }

        userRepository.save(user);
        return "User updated successfully";

    }

    @PutMapping(path = "/update/article/{id}")
    public @ResponseBody String updateArticle (@PathVariable Integer id,@RequestBody Article updatedArticle){
        Article article = articleRepository.findById(id).get();

//        if(!updatedArticle.getAuthor().isEmpty()){
//            article.setAuthor(updatedArticle.getAuthor());
//        }

        if(!updatedArticle.getContent().isEmpty()){
            article.setContent(updatedArticle.getContent());
        }

        articleRepository.save(article);
        return "Article updated successfully";

    }
}